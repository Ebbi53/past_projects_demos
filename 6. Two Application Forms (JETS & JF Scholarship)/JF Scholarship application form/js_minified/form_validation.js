define(["jquery", "file_upload", "core-js/modules/es6.promise", "core-js/modules/es6.object.to-string", "core-js/modules/es7.array.includes", "core-js/modules/es6.string.includes", "core-js/modules/es6.array.find", "regenerator-runtime/runtime", "_asyncToGenerator"], function (a, b, c, d, e, f, g, h, i) {
    return (/*#__PURE__*/i(/*#__PURE__*/regeneratorRuntime.mark(function c() {
        var d;// var isValid;
        return regeneratorRuntime.wrap(function (c) { for (; ;)switch (c.prev = c.next) { case 0: return d = function (b, c) { b ? (0 == a("label[for=".concat(a(c).attr("id"), "]")).length ? a(c).parents(".form-group").find("label").addClass("incomplete-label") : a("label[for=".concat(a(c).attr("id"), "]")).addClass("incomplete-label"), a(c).is("select") && a(c).attr("class").includes("select2") ? a("#select2-".concat(a(c).attr("id"), "-container")).parent().addClass("incomplete-input") : a(c).addClass("incomplete-input")) : (a(c).is("select") && a(c).attr("class").includes("select2") ? a("#select2-".concat(a(c).attr("id"), "-container")).parent().removeClass("incomplete-input") : a(c).removeClass("incomplete-input"), 0 != a("label[for=".concat(a(c).attr("id"), "]")).length || a(c).parents(".form-group").find("input").hasClass("incomplete-input") ? a("label[for=".concat(a(c).attr("id"), "]")).removeClass("incomplete-label") : a(c).parents(".form-group").find("label").removeClass("incomplete-label")) }, c.next = 4, new Promise(function (c) { a(".compulsory").each(function (e) { a(this).is("label") ? 0 == a("input[name=".concat(a(this).attr("for"), "]:checked")).length ? a(this).parents(".form-group").find("label").addClass("incomplete-label") : a(this).parents(".form-group").find("label").removeClass("incomplete-label") : "file" == a(this).attr("type") ? "" == b.uploadData[a(this).attr("name")] ? d(!0, this) : d(!1, this) : "" == a(this).val() || "--" == a(this).val() ? d(!0, this) : a(this).hasClass("invalid") ? "" : d(!1, this), e == a(".compulsory").length - 1 && c() }) }); case 4: return c.next = 6, new Promise(function (b) { a(".sections").each(function (c) { 0 == a(this).find("[class*=incomplete]").length ? ($section_complete = a(this), a(".nav-link").each(function () { a(this).attr("href") == "#" + $section_complete.attr("id") && (a(this).css("color", ""), a(this).removeClass("incomplete_link")) })) : ($section_incomplete = a(this), a(".nav-link").each(function () { a(this).attr("href") == "#" + $section_incomplete.attr("id") && (a(this).css("color", "#CC0000"), a(this).addClass("incomplete_link")) })), c == a(".sections").length - 1 && b() }) }); case 6: return c.abrupt("return", 0 == a("[class*=incomplete]").length); case 7: case "end": return c.stop(); } }, c)
    })))
});